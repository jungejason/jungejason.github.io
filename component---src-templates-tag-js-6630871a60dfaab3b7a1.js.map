{"version":3,"sources":["webpack:///./src/templates/tag.js","webpack:///./src/components/tags.js"],"names":["TagPage","_React$Component","apply","arguments","_inheritsLoose","prototype","render","tag","this","props","pageContext","siteTitle","data","site","siteMetadata","title","posts","allMarkdownRemark","edges","React","createElement","Layout","location","SEO","Link","to","map","_ref","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","date","Tags","tags","dangerouslySetInnerHTML","__html","description","excerpt","Component","tagContent","reduce","accumulator","push"],"mappings":"oMAMqC,IAE/BA,EAAO,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAA,KAAAC,YAAA,KAsCV,OAtCUC,YAAAJ,EAAAC,GAAAD,EAAAK,UAEXC,OAAA,WACE,MAAM,IAAEC,GAAQC,KAAKC,MAAMC,YACrBC,EAAYH,KAAKC,MAAMG,KAAKC,KAAKC,aAAaC,MAC9CC,EAAQR,KAAKC,MAAMG,KAAKK,kBAAkBC,MAEhD,OACEC,IAAAC,cAACC,IAAM,CAACC,SAAUd,KAAKC,MAAMa,SAAUP,MAAOJ,GAC5CQ,IAAAC,cAACG,IAAG,CAACR,MAAK,WAAaR,IACvBY,IAAAC,cAAA,UAAI,kBAAgBb,GACpBY,IAAAC,cAAA,cAAQD,IAAAC,cAACI,OAAI,CAACC,GAAG,SAAQ,aACxBT,EAAMU,IAAIC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAMZ,EAAQa,EAAKC,YAAYd,OAASa,EAAKE,OAAOC,KACpD,OACEZ,IAAAC,cAAA,OAAKY,IAAKJ,EAAKE,OAAOC,MACpBZ,IAAAC,cAAA,MACEa,MAAO,CACLC,aAAcC,YAAO,EAAI,KAG3BhB,IAAAC,cAACI,OAAI,CAACS,MAAO,CAAEG,UAAU,QAAWX,GAAIG,EAAKE,OAAOC,MACjDhB,IAGLI,IAAAC,cAAA,aAAQQ,EAAKC,YAAYQ,MACzBlB,IAAAC,cAAA,WACAD,IAAAC,cAACkB,IAAI,CAACC,KAAMX,EAAKC,YAAYU,MAAQ,KACrCpB,IAAAC,cAAA,KACEoB,wBAAyB,CACvBC,OAAQb,EAAKC,YAAYa,aAAed,EAAKe,gBAQ5D3C,EAtCU,CAASmB,IAAMyB,WAyCb5C,a,oCCjDf,qCAwBesC,IArBFX,IAAe,IACtBkB,GADQ,KAAEN,GAAMZ,EAapB,OAPEkB,EAHGN,EAGUA,EAAKO,OAAO,CAACC,EAAaxC,KACrCwC,EAAYC,KAAK7B,IAAAC,cAACI,OAAI,CAACC,GAAE,QAAUlB,GAAQA,IAC3CwC,EAAYC,KAAK,MACVD,GACN,IANU,OAUb5B,IAAAC,cAAA,SAAGD,IAAAC,cAAA,aAAO,QACF,IACLyB","file":"component---src-templates-tag-js-6630871a60dfaab3b7a1.js","sourcesContent":["import { Link, graphql } from \"gatsby\"\nimport React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\nimport Tags from \"../components/tags\"\n\nclass TagPage extends React.Component {\n\n  render() {\n    const { tag } = this.props.pageContext\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const posts = this.props.data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={`Tag for ${tag}`} />\n        <h1>Posts for tag #{tag}</h1>\n        <strong><Link to=\"/tags\">All Tags</Link></strong>\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <br/>\n              <Tags tags={node.frontmatter.tags || []} />\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </div>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default TagPage\n\nexport const pageQuery = graphql`\n  query BlogPostsByTag($tag: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: {\n      fields: [frontmatter___date], order: DESC },\n      filter: {frontmatter: {tags: {in: [$tag]}, enabled: {eq: \"yes\"}}}\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Tags = ({ tags }) => {\n  let tagContent\n\n  if (!tags) {\n    tagContent = \"None\"\n  } else {\n    tagContent = tags.reduce((accumulator, tag) => {\n      accumulator.push(<Link to={`/tag/${tag}`}>{tag}</Link>)\n      accumulator.push(', ')\n      return accumulator\n    }, [])\n  }\n\n  return (\n    <i><small>\n      tags:{' '}\n      {tagContent}\n    </small></i>\n  )\n}\n\nexport default Tags"],"sourceRoot":""}