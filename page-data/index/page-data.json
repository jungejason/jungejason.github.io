{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Mushyroom Blog","description":"fun, dev-efficiency, art, meaning..."}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"This is a special holiday story: Sneaky Emond!   Made mainly by the sister, with Big Texts and Procreate.","fields":{"slug":"/sneaky-edmond/"},"frontmatter":{"date":"January 01, 2021","title":"Special Holiday Story - Sneaky Edmond!","description":"Edmond is a sneaky boy!"}}},{"node":{"excerpt":"一个可能的bug…","fields":{"slug":"/wechat-travel-safety-miniprogram-tips/"},"frontmatter":{"date":"December 26, 2020","title":"国际健康码微信小程序上传图片技巧","description":"tips of using the wechat miniprogram for traveling"}}},{"node":{"excerpt":"对于个人的核心工具集的选择，因为编程中熟练使用主力IDE能够大大提高效率，所以IDE是一个必选项。而IDE与VIM结合的插件，对于VIM使用者，常常是一个必选项。 在Jetbrains系列工具中，插件IdeaVim非常优秀，对我个人而言是一个必选项。 选用IdeaVim…","fields":{"slug":"/ideavim/"},"frontmatter":{"date":"December 21, 2020","title":"核心工具之 ideavim","description":"core toolset ideavim"}}},{"node":{"excerpt":"查看 diff 是开发工作中常见一个场景，值得优化。下面做一些总结。 总结的基本思路是少就是多。比如 使用尽量少的工具，尽量少安装插件。这样可以减少工具入口，减少不必要的心智负担。 只处理最常见的场景。至于更偏的场景临时Google找解决办法。 场景一：在 git diff…","fields":{"slug":"/common-diff-scenarios/"},"frontmatter":{"date":"December 05, 2020","title":"常见diff的场景的优化","description":"Optimization of common scenarios of diff"}}},{"node":{"excerpt":"线性的代码提交历史，能给自动化定位问题带来很大帮助，使得我们可以从当前有问题的提交回溯，找到历史上第一个有问题的提交。更棒的是，我们还可以使用折半查找的办法，用O(LogN)的时间找到那个有问题的提交。 比如，在一个代码仓中，有C101 ~C20…","fields":{"slug":"/git-bisect-run/"},"frontmatter":{"date":"October 01, 2019","title":"自动化寻找问题commit的利器: git bisect run","description":"Describe how git bisect run works"}}},{"node":{"excerpt":"命令模式中的基础命令 VIM…","fields":{"slug":"/vim-commands/"},"frontmatter":{"date":"July 20, 2019","title":"VIM Commands","description":"Basic VIM Commands"}}}]}},"pageContext":{}},"staticQueryHashes":["426816048","63159454"]}