{"version":3,"sources":["webpack:///./src/templates/blog-post.js"],"names":["BlogPostTemplate","_React$Component","apply","arguments","_inheritsLoose","prototype","render","post","this","props","data","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","pageContext","React","createElement","Layout","location","SEO","frontmatter","description","excerpt","style","marginTop","rhythm","marginBottom","scale","display","date","Tags","tags","dangerouslySetInnerHTML","__html","html","Bio","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel","Component"],"mappings":"gNAOqC,IAE/BA,EAAgB,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAA,KAAAC,YAAA,KAwEnB,OAxEmBC,YAAAJ,EAAAC,GAAAD,EAAAK,UACpBC,OAAA,WACE,MAAMC,EAAOC,KAAKC,MAAMC,KAAKC,eACvBC,EAAYJ,KAAKC,MAAMC,KAAKG,KAAKC,aAAaC,OAC9C,SAAEC,EAAQ,KAAEC,GAAST,KAAKC,MAAMS,YAEtC,OACEC,IAAAC,cAACC,IAAM,CAACC,SAAUd,KAAKC,MAAMa,SAAUP,MAAOH,GAC5CO,IAAAC,cAACG,IAAG,CACFR,MAAOR,EAAKiB,YAAYT,MACxBU,YAAalB,EAAKiB,YAAYC,aAAelB,EAAKmB,UAEpDP,IAAAC,cAAA,MACEO,MAAO,CACLC,UAAWC,YAAO,GAClBC,aAAc,IAGfvB,EAAKiB,YAAYT,OAEpBI,IAAAC,cAAA,KACEO,MAAO,IACFI,aAAM,IACTC,QAAQ,QACRF,aAAcD,YAAO,KAGtBtB,EAAKiB,YAAYS,MAEpBd,IAAAC,cAAA,KACEO,MAAO,IACFI,aAAM,IACTC,QAAQ,QACRF,aAAcD,YAAO,KAGvBV,IAAAC,cAACc,IAAI,CAACC,KAAM5B,EAAKiB,YAAYW,MAAQ,MAEvChB,IAAAC,cAAA,OAAKgB,wBAAyB,CAAEC,OAAQ9B,EAAK+B,QAC7CnB,IAAAC,cAAA,MACEO,MAAO,CACLG,aAAcD,YAAO,MAGzBV,IAAAC,cAACmB,IAAG,MAEJpB,IAAAC,cAAA,MACEO,MAAO,CACLK,QAAQ,OACRQ,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGXxB,IAAAC,cAAA,UACGJ,GACCG,IAAAC,cAACwB,OAAI,CAACC,GAAI7B,EAAS8B,OAAOC,KAAMC,IAAI,QAAO,KACtChC,EAASQ,YAAYT,QAI9BI,IAAAC,cAAA,UACGH,GACCE,IAAAC,cAACwB,OAAI,CAACC,GAAI5B,EAAK6B,OAAOC,KAAMC,IAAI,QAC7B/B,EAAKO,YAAYT,MAAM,UAOrCf,EAxEmB,CAASmB,IAAM8B,WA2EtBjD","file":"component---src-templates-blog-post-js-8d1b3c24c207d1cb8fb2.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\nimport Tags from \"../components/tags\"\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <h1\n          style={{\n            marginTop: rhythm(1),\n            marginBottom: 0,\n          }}\n        >\n          {post.frontmatter.title}\n        </h1>\n        <p\n          style={{\n            ...scale(-1 / 5),\n            display: `block`,\n            marginBottom: rhythm(1),\n          }}\n        >\n          {post.frontmatter.date}\n        </p>\n        <p\n          style={{\n            ...scale(-1 / 5),\n            display: `block`,\n            marginBottom: rhythm(1),\n          }}\n        >\n          <Tags tags={post.frontmatter.tags || []} />\n        </p>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <Bio />\n\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n  }\n`\n"],"sourceRoot":""}